<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="address (street)" xml:space="preserve">
    <value>address (street)</value>
  </data>
  <data name="address (town)" xml:space="preserve">
    <value>address (town)</value>
  </data>
  <data name="Appointment" xml:space="preserve">
    <value>Appointment</value>
  </data>
  <data name="Are the checkboxes set correctly - monthly/yearly repeat?" xml:space="preserve">
    <value>Are the checkboxes set correctly - monthly/yearly repeat?</value>
  </data>
  <data name="birthday" xml:space="preserve">
    <value>birthday</value>
  </data>
  <data name="Buddy" xml:space="preserve">
    <value>Buddy</value>
  </data>
  <data name="Calendar view" xml:space="preserve">
    <value>Calendar view</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="Confirm" xml:space="preserve">
    <value>Confirm</value>
  </data>
  <data name="Confirm and save" xml:space="preserve">
    <value>Confirm and save</value>
  </data>
  <data name="Confirm deletion" xml:space="preserve">
    <value>Confirm deletion</value>
  </data>
  <data name="Contact" xml:space="preserve">
    <value>Contact</value>
  </data>
  <data name="Contact must have a name!" xml:space="preserve">
    <value>Contact must have a name!</value>
  </data>
  <data name="Contacts exported successfully!" xml:space="preserve">
    <value>Contacts exported successfully!</value>
  </data>
  <data name="Contacts need a name!" xml:space="preserve">
    <value>Contacts need a name!</value>
  </data>
  <data name="Could not read ICS file!" xml:space="preserve">
    <value>Could not read ICS file!</value>
  </data>
  <data name="Do you really want to delete contact?" xml:space="preserve">
    <value>Do you really want to delete contact?</value>
  </data>
  <data name="Do you really want to delete date?" xml:space="preserve">
    <value>Do you really want to delete date?</value>
  </data>
  <data name="Do you want to delete the entire series (yes) or just this individual event (no)?" xml:space="preserve">
    <value>Do you want to delete the entire series (yes) or just this individual event (no)?</value>
  </data>
  <data name="email" xml:space="preserve">
    <value>email</value>
  </data>
  <data name="End" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="Enter a town to look up its weather data!" xml:space="preserve">
    <value>Enter a town to look up its weather data!</value>
  </data>
  <data name="export" xml:space="preserve">
    <value>export</value>
  </data>
  <data name="felt" xml:space="preserve">
    <value>felt</value>
  </data>
  <data name="filter" xml:space="preserve">
    <value>filter</value>
  </data>
  <data name="givenname" xml:space="preserve">
    <value>givenname</value>
  </data>
  <data name="humidity" xml:space="preserve">
    <value>humidity</value>
  </data>
  <data name="import" xml:space="preserve">
    <value>import</value>
  </data>
  <data name="Info: If birthday is today or later, it will not be saved." xml:space="preserve">
    <value>Info: If birthday is today or later, it will not be saved.</value>
  </data>
  <data name="JANUARY AGAIN!" xml:space="preserve">
    <value>JANUARY AGAIN!</value>
  </data>
  <data name="Left: current; right: forecast for following day" xml:space="preserve">
    <value>Left: current; right: forecast for following day</value>
  </data>
  <data name="maximal" xml:space="preserve">
    <value>maximal</value>
  </data>
  <data name="minimal" xml:space="preserve">
    <value>minimal</value>
  </data>
  <data name="monthly" xml:space="preserve">
    <value>monthly</value>
  </data>
  <data name="Multi-day appointments must not exceed the monthly limit." xml:space="preserve">
    <value>Multi-day appointments must not exceed the monthly limit.</value>
  </data>
  <data name="My Event" xml:space="preserve">
    <value>My Event</value>
  </data>
  <data name="Not a valid email!" xml:space="preserve">
    <value>Not a valid email!</value>
  </data>
  <data name="Not a valid phone number!" xml:space="preserve">
    <value>Not a valid phone number!</value>
  </data>
  <data name="notes" xml:space="preserve">
    <value>notes</value>
  </data>
  <data name="phone" xml:space="preserve">
    <value>phone</value>
  </data>
  <data name="Pick day and below hour" xml:space="preserve">
    <value>Pick day and below hour</value>
  </data>
  <data name="Pick hours" xml:space="preserve">
    <value>Pick hours</value>
  </data>
  <data name="Rain quantity next hour" xml:space="preserve">
    <value>Rain quantity next hour</value>
  </data>
  <data name="repetition" xml:space="preserve">
    <value>repetition</value>
  </data>
  <data name="Save" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="Start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="surname" xml:space="preserve">
    <value>name</value>
  </data>
  <data name="Table view" xml:space="preserve">
    <value>Table view</value>
  </data>
  <data name="temperature" xml:space="preserve">
    <value>temperature</value>
  </data>
  <data name="today" xml:space="preserve">
    <value>today</value>
  </data>
  <data name="tomorrow" xml:space="preserve">
    <value>tomorrow</value>
  </data>
  <data name="Tomorrow's rain" xml:space="preserve">
    <value>Tomorrow's rain</value>
  </data>
  <data name="Weather data for" xml:space="preserve">
    <value>Weather data for</value>
  </data>
  <data name="weekly individual til end of year" xml:space="preserve">
    <value>weekly individual til end of year</value>
  </data>
  <data name="whole day" xml:space="preserve">
    <value>whole day</value>
  </data>
  <data name="winddirection" xml:space="preserve">
    <value>winddirection</value>
  </data>
  <data name="windspeed" xml:space="preserve">
    <value>windspeed</value>
  </data>
  <data name="yearly" xml:space="preserve">
    <value>yearly</value>
  </data>
</root>